public class task1{
// S(n)=1-2+3-4+...+ ((-1)^(n+1) ).n , n>0
	public static int getSn1(int n) {
		if (n == 1)
			return 0;
		else {
			return getSn1(n - 1) + (int) Math.pow(-1, n + 1);
		}
	}
	// tinh gia thua

	public static int factomal(int n) {
		if (n == 1)
			return 1;
		else

		{
			return n * (factomal(n - 1));
		}

	}

// S(n)=1+1.2+1.2.3+...+1.2.3...n,     n>0
	public static int getSn2(int n) {
		if (n == 1)

			return 1;
		else {
			return getSn2(n - 1) + factomal(n);
		}

	}

// S(n)=1^2+2^2+3^2+....+n^2 ,     n>0
	public static int getSn3(int n) {
		if (n == 0)
			return 0;
		else {
			return getSn3(n - 1) + (int) Math.pow(n, 2);
		}
	}

	public static int getSn41(int n) {
		return 2 * n;
	}

// S(n)=1 + 1/2 + 1/(2.4) + 1/(2.4.6)+...+1/(2.4.6.2n),   n>=0
	public static double getSn4(int n) {
		if (n == 0)
			return 1;
		else {
			return getSn4(n - 1) + 1 / (getSn41(n));
		}
	}

	public class PascalTriangle {

		// generate the next row based on the previous row
		// Ex. prevRow = {1} ==> nextRow = {1, 1}
		// Ex. prevRow = {1, 1} ==> nextRow = {1, 2, 1}
		public static int[] generateNextRow(int[] prevRow) {
			int[] re = new int[prevRow.length + 1];
			re[0] = 1;
			re[re.length - 1] = 1;
			for (int i = 1; i < re.length - 1; i++) {
				re[i] = prevRow[i - 1] + prevRow[i];
			}
			return re;

		}

		// get the nth row.
		// For example: n=1 ==> {1}, n=2 ==> {1, 1}, ...
		public static int[] getPascalTriangle(int n) {
					if(n==1)
					return new int[] {1};
				else {
					int[] preRow = getPascalTriangle(n-1);
					return generateNextRow(preRow);
				}
					
				}
	}
	// This method is used to display a Pascal triangle basedon the parameter n.

	// Where n represents the number of rows
	public static void printPascalTriangle(int row) {
		// todo
	}
